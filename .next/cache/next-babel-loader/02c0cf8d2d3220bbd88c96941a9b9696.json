{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ADD_CART, REMOVE_CART, SET_CART } from \"./cart.types\";\nexport default ((state, action) => {\n  switch (action.type) {\n    case SET_CART:\n      console.log(action.payload);\n      return _objectSpread({}, state);\n\n    case ADD_CART:\n      // check if new added cart is exist on cart\n      const isCartExist = state.carts.find(cart => cart.id === action.payload.id);\n\n      if (isCartExist) {\n        // add 1 to cart quantity\n        const carts = state.carts.map(cart => cart.id === action.payload.id ? _objectSpread({}, cart, {\n          quantity: cart.quantity + 1\n        }) : cart);\n        return _objectSpread({}, state, {\n          carts\n        });\n      } else {\n        return _objectSpread({}, state, {\n          carts: [...state.carts, action.payload]\n        });\n      }\n\n    case REMOVE_CART:\n      const filteredCarts = state.carts.filter(cart => cart.id !== action.payload);\n      return _objectSpread({}, state, {\n        carts: filteredCarts\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/home/russ/projects/dress-shop/store/cart/cart.reducer.js"],"names":["ADD_CART","REMOVE_CART","SET_CART","state","action","type","console","log","payload","isCartExist","carts","find","cart","id","map","quantity","filteredCarts","filter"],"mappings":";;;;;;;;;;;;AAAA,SAASA,QAAT,EAAmBC,WAAnB,EAAgCC,QAAhC,QAAgD,cAAhD;AAEA,gBAAe,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAChC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKH,QAAL;AACEI,MAAAA,OAAO,CAACC,GAAR,CAAYH,MAAM,CAACI,OAAnB;AACA,+BAAYL,KAAZ;;AACF,SAAKH,QAAL;AACE;AACA,YAAMS,WAAW,GAAGN,KAAK,CAACO,KAAN,CAAYC,IAAZ,CAClBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYT,MAAM,CAACI,OAAP,CAAeK,EADjB,CAApB;;AAGA,UAAIJ,WAAJ,EAAiB;AACf;AACA,cAAMC,KAAK,GAAGP,KAAK,CAACO,KAAN,CAAYI,GAAZ,CAAgBF,IAAI,IAChCA,IAAI,CAACC,EAAL,KAAYT,MAAM,CAACI,OAAP,CAAeK,EAA3B,qBACSD,IADT;AACeG,UAAAA,QAAQ,EAAEH,IAAI,CAACG,QAAL,GAAgB;AADzC,aAEIH,IAHQ,CAAd;AAKA,iCAAYT,KAAZ;AAAmBO,UAAAA;AAAnB;AACD,OARD,MAQO;AACL,iCAAYP,KAAZ;AAAmBO,UAAAA,KAAK,EAAE,CAAC,GAAGP,KAAK,CAACO,KAAV,EAAiBN,MAAM,CAACI,OAAxB;AAA1B;AACD;;AACH,SAAKP,WAAL;AACE,YAAMe,aAAa,GAAGb,KAAK,CAACO,KAAN,CAAYO,MAAZ,CACpBL,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYT,MAAM,CAACI,OADP,CAAtB;AAGA,+BAAYL,KAAZ;AAAmBO,QAAAA,KAAK,EAAEM;AAA1B;;AACF;AACE,aAAOb,KAAP;AA1BJ;AA4BD,CA7BD","sourcesContent":["import { ADD_CART, REMOVE_CART, SET_CART } from \"./cart.types\";\n\nexport default (state, action) => {\n  switch (action.type) {\n    case SET_CART:\n      console.log(action.payload);\n      return { ...state };\n    case ADD_CART:\n      // check if new added cart is exist on cart\n      const isCartExist = state.carts.find(\n        cart => cart.id === action.payload.id\n      );\n      if (isCartExist) {\n        // add 1 to cart quantity\n        const carts = state.carts.map(cart =>\n          cart.id === action.payload.id\n            ? { ...cart, quantity: cart.quantity + 1 }\n            : cart\n        );\n        return { ...state, carts };\n      } else {\n        return { ...state, carts: [...state.carts, action.payload] };\n      }\n    case REMOVE_CART:\n      const filteredCarts = state.carts.filter(\n        cart => cart.id !== action.payload\n      );\n      return { ...state, carts: filteredCarts };\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}