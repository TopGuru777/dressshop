{"ast":null,"code":"import connectDB from '../../utils/connectDB';\nimport Product from '../../models/Product';\nexport default (async (req, res) => {\n  console.log(process.env.MONGO_URL);\n  await connectDB();\n  let {\n    currentPage,\n    pageSize\n  } = req.query;\n  let products = [];\n  const totalProducts = await Product.countDocuments();\n  currentPage = Number(currentPage);\n  pageSize = Number(pageSize);\n\n  if (currentPage === 1) {\n    products = await Product.find().limit(pageSize);\n  } else {\n    const skips = pageSize * (currentPage - 1);\n    products = await Product.find().skip(skips).limit(pageSize);\n  }\n\n  res.json({\n    products,\n    totalProducts\n  });\n});","map":{"version":3,"sources":["/home/russ/projects/dress-shop/pages/api/products.js"],"names":["connectDB","Product","req","res","console","log","process","env","MONGO_URL","currentPage","pageSize","query","products","totalProducts","countDocuments","Number","find","limit","skips","skip","json"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,uBAAtB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AAEA,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACjCC,EAAAA,OAAO,CAACC,GAAR,CAAYC,OAAO,CAACC,GAAR,CAAYC,SAAxB;AACA,QAAMR,SAAS,EAAf;AACA,MAAI;AAAES,IAAAA,WAAF;AAAeC,IAAAA;AAAf,MAA4BR,GAAG,CAACS,KAApC;AACA,MAAIC,QAAQ,GAAG,EAAf;AACA,QAAMC,aAAa,GAAG,MAAMZ,OAAO,CAACa,cAAR,EAA5B;AACAL,EAAAA,WAAW,GAAGM,MAAM,CAACN,WAAD,CAApB;AACAC,EAAAA,QAAQ,GAAGK,MAAM,CAACL,QAAD,CAAjB;;AAEA,MAAID,WAAW,KAAK,CAApB,EAAuB;AACrBG,IAAAA,QAAQ,GAAG,MAAMX,OAAO,CAACe,IAAR,GAAeC,KAAf,CAAqBP,QAArB,CAAjB;AACD,GAFD,MAEO;AACL,UAAMQ,KAAK,GAAGR,QAAQ,IAAID,WAAW,GAAG,CAAlB,CAAtB;AACAG,IAAAA,QAAQ,GAAG,MAAMX,OAAO,CAACe,IAAR,GACdG,IADc,CACTD,KADS,EAEdD,KAFc,CAERP,QAFQ,CAAjB;AAGD;;AACDP,EAAAA,GAAG,CAACiB,IAAJ,CAAS;AAAER,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAT;AACD,CAlBD","sourcesContent":["import connectDB from '../../utils/connectDB';\nimport Product from '../../models/Product';\n\nexport default async (req, res) => {\n  console.log(process.env.MONGO_URL);\n  await connectDB();\n  let { currentPage, pageSize } = req.query;\n  let products = [];\n  const totalProducts = await Product.countDocuments();\n  currentPage = Number(currentPage);\n  pageSize = Number(pageSize);\n\n  if (currentPage === 1) {\n    products = await Product.find().limit(pageSize);\n  } else {\n    const skips = pageSize * (currentPage - 1);\n    products = await Product.find()\n      .skip(skips)\n      .limit(pageSize);\n  }\n  res.json({ products, totalProducts });\n};\n"]},"metadata":{},"sourceType":"module"}