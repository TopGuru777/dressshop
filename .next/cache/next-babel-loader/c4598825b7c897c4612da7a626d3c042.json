{"ast":null,"code":"import jwt from \"jsonwebtoken\";\nimport Cart from \"../../models/Cart\";\nimport connectDB from \"../../utils/connectDB\";\nimport calculateCartTotal from \"../../utils/calculateCartTotal\";\nimport Stripe from \"stripe\";\nconst stripe = Stripe(process.env.STRIPE_KEY);\nexport default (async (req, res) => {\n  await connectDB();\n  const {\n    paymentData\n  } = req.body;\n\n  try {\n    const {\n      userId\n    } = jwt.verify(req.headers.authorization, process.env.JWT_SECRET); // find cart based on User Id\n\n    const cart = await Cart.findOne({\n      user: userId\n    }).populate({\n      path: \"carts.product\",\n      model: \"Product\"\n    }); // calculate cart total\n\n    const {\n      cartTotal,\n      stripeTotal\n    } = calculateCartTotal(cart.carts); //get email from paymentData\n\n    const prevCustomer = await stripe.customers.list({\n      email: paymentData.email,\n      limit: 1\n    });\n    console.log(prevCustomer.data); // const isExistingCustomer =\n\n    res.send(\"test\");\n  } catch (error) {\n    console.log(error);\n    res.status(500).send(\"Error in processing your order. Please try again\");\n  }\n});","map":{"version":3,"sources":["/home/russ/projects/dress-shop/pages/api/checkout.js"],"names":["jwt","Cart","connectDB","calculateCartTotal","Stripe","stripe","process","env","STRIPE_KEY","req","res","paymentData","body","userId","verify","headers","authorization","JWT_SECRET","cart","findOne","user","populate","path","model","cartTotal","stripeTotal","carts","prevCustomer","customers","list","email","limit","console","log","data","send","error","status"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,cAAhB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,OAAOC,kBAAP,MAA+B,gCAA/B;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,MAAMC,MAAM,GAAGD,MAAM,CAACE,OAAO,CAACC,GAAR,CAAYC,UAAb,CAArB;AAEA,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACjC,QAAMR,SAAS,EAAf;AAEA,QAAM;AAAES,IAAAA;AAAF,MAAkBF,GAAG,CAACG,IAA5B;;AAEA,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAab,GAAG,CAACc,MAAJ,CACjBL,GAAG,CAACM,OAAJ,CAAYC,aADK,EAEjBV,OAAO,CAACC,GAAR,CAAYU,UAFK,CAAnB,CADE,CAKF;;AACA,UAAMC,IAAI,GAAG,MAAMjB,IAAI,CAACkB,OAAL,CAAa;AAAEC,MAAAA,IAAI,EAAEP;AAAR,KAAb,EAA+BQ,QAA/B,CAAwC;AACzDC,MAAAA,IAAI,EAAE,eADmD;AAEzDC,MAAAA,KAAK,EAAE;AAFkD,KAAxC,CAAnB,CANE,CAUF;;AACA,UAAM;AAAEC,MAAAA,SAAF;AAAaC,MAAAA;AAAb,QAA6BtB,kBAAkB,CAACe,IAAI,CAACQ,KAAN,CAArD,CAXE,CAYF;;AACA,UAAMC,YAAY,GAAG,MAAMtB,MAAM,CAACuB,SAAP,CAAiBC,IAAjB,CAAsB;AAC/CC,MAAAA,KAAK,EAAEnB,WAAW,CAACmB,KAD4B;AAE/CC,MAAAA,KAAK,EAAE;AAFwC,KAAtB,CAA3B;AAIAC,IAAAA,OAAO,CAACC,GAAR,CAAYN,YAAY,CAACO,IAAzB,EAjBE,CAkBF;;AACAxB,IAAAA,GAAG,CAACyB,IAAJ,CAAS,MAAT;AACD,GApBD,CAoBE,OAAOC,KAAP,EAAc;AACdJ,IAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACA1B,IAAAA,GAAG,CAAC2B,MAAJ,CAAW,GAAX,EAAgBF,IAAhB,CAAqB,kDAArB;AACD;AACF,CA7BD","sourcesContent":["import jwt from \"jsonwebtoken\";\nimport Cart from \"../../models/Cart\";\nimport connectDB from \"../../utils/connectDB\";\nimport calculateCartTotal from \"../../utils/calculateCartTotal\";\nimport Stripe from \"stripe\";\n\nconst stripe = Stripe(process.env.STRIPE_KEY);\n\nexport default async (req, res) => {\n  await connectDB();\n\n  const { paymentData } = req.body;\n\n  try {\n    const { userId } = jwt.verify(\n      req.headers.authorization,\n      process.env.JWT_SECRET\n    );\n    // find cart based on User Id\n    const cart = await Cart.findOne({ user: userId }).populate({\n      path: \"carts.product\",\n      model: \"Product\"\n    });\n    // calculate cart total\n    const { cartTotal, stripeTotal } = calculateCartTotal(cart.carts);\n    //get email from paymentData\n    const prevCustomer = await stripe.customers.list({\n      email: paymentData.email,\n      limit: 1\n    });\n    console.log(prevCustomer.data);\n    // const isExistingCustomer =\n    res.send(\"test\");\n  } catch (error) {\n    console.log(error);\n    res.status(500).send(\"Error in processing your order. Please try again\");\n  }\n};\n"]},"metadata":{},"sourceType":"module"}