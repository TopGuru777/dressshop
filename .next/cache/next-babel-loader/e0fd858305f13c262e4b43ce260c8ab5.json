{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport mongoose from \"mongoose\";\nimport connectDB from \"../../utils/connectDB\";\nimport Cart from \"../../models/Cart\";\nimport jwt from \"jsonwebtoken\";\nconnectDB();\nvar ObjectId = mongoose.Types.ObjectId;\nexport default (function _callee(req, res) {\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.t0 = req.method;\n          _context.next = _context.t0 === \"GET\" ? 3 : _context.t0 === \"POST\" ? 6 : 9;\n          break;\n\n        case 3:\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(handleGetRequest(req, res));\n\n        case 5:\n          return _context.abrupt(\"break\", 10);\n\n        case 6:\n          _context.next = 8;\n          return _regeneratorRuntime.awrap(handlePostRequest(req, res));\n\n        case 8:\n          return _context.abrupt(\"break\", 10);\n\n        case 9:\n          res.status(422).send(\"Unknown method\");\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n});\n\nfunction handleGetRequest(req, res) {\n  var _jwt$verify, userId, cart;\n\n  return _regeneratorRuntime.async(function handleGetRequest$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (req.headers.authorization) {\n            _context2.next = 2;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", res.status(401).send(\"No authorization token\"));\n\n        case 2:\n          _context2.prev = 2;\n          _jwt$verify = jwt.verify(req.headers.authorization, process.env.JWT_SECRET), userId = _jwt$verify.userId;\n          _context2.next = 6;\n          return _regeneratorRuntime.awrap(Cart.findOne({\n            user: userId\n          }).populate({\n            path: \"carts.product\",\n            model: \"Product\"\n          }));\n\n        case 6:\n          cart = _context2.sent;\n          res.status(200).json(cart);\n          _context2.next = 14;\n          break;\n\n        case 10:\n          _context2.prev = 10;\n          _context2.t0 = _context2[\"catch\"](2);\n          console.error(_context2.t0);\n          res.status(500).send(\"Error in fetching cart\");\n\n        case 14:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[2, 10]]);\n}\n\nfunction handlePostRequest(req, res) {\n  var _req$body, productId, quantity, _jwt$verify2, userId, cart, productExist, newProduct;\n\n  return _regeneratorRuntime.async(function handlePostRequest$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _req$body = req.body, productId = _req$body.productId, quantity = _req$body.quantity;\n\n          if (req.headers.authorization) {\n            _context3.next = 3;\n            break;\n          }\n\n          return _context3.abrupt(\"return\", res.status(401).send(\"No authorization token\"));\n\n        case 3:\n          _context3.prev = 3;\n          _jwt$verify2 = jwt.verify(req.headers.authorization, process.env.JWT_SECRET), userId = _jwt$verify2.userId;\n          _context3.next = 7;\n          return _regeneratorRuntime.awrap(Cart.findOne({\n            user: userId\n          }));\n\n        case 7:\n          cart = _context3.sent;\n\n          if (!cart) {\n            _context3.next = 20;\n            break;\n          }\n\n          //check if product in cart already exist\n          productExist = cart.carts.some(function (cart) {\n            return ObjectId(productId).equals(cart.product);\n          });\n\n          if (!productExist) {\n            _context3.next = 15;\n            break;\n          }\n\n          _context3.next = 13;\n          return _regeneratorRuntime.awrap(Cart.findOneAndUpdate({\n            _id: cart._id,\n            \"carts.product\": productId\n          }, {\n            $inc: {\n              \"carts.$.quantity\": quantity\n            }\n          }));\n\n        case 13:\n          _context3.next = 18;\n          break;\n\n        case 15:\n          newProduct = {\n            quantity: quantity,\n            product: productId\n          };\n          _context3.next = 18;\n          return _regeneratorRuntime.awrap(Cart.findOneAndUpdate({\n            _id: cart._id\n          }, {\n            $addToSet: {\n              carts: newProduct\n            }\n          }));\n\n        case 18:\n          _context3.next = 22;\n          break;\n\n        case 20:\n          _context3.next = 22;\n          return _regeneratorRuntime.awrap(new Cart({\n            user: userId,\n            carts: [{\n              quantity: quantity,\n              product: productId\n            }]\n          }).save());\n\n        case 22:\n          res.status(200).send(\"Successfully added to cart\");\n          _context3.next = 29;\n          break;\n\n        case 25:\n          _context3.prev = 25;\n          _context3.t0 = _context3[\"catch\"](3);\n          console.error(_context3.t0);\n          res.status(500).send(\"Error in adding cart\");\n\n        case 29:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[3, 25]]);\n}","map":{"version":3,"sources":["/home/russ/projects/dress-shop/pages/api/cart.js"],"names":["mongoose","connectDB","Cart","jwt","ObjectId","Types","req","res","method","handleGetRequest","handlePostRequest","status","send","headers","authorization","verify","process","env","JWT_SECRET","userId","findOne","user","populate","path","model","cart","json","console","error","body","productId","quantity","productExist","carts","some","equals","product","findOneAndUpdate","_id","$inc","newProduct","$addToSet","save"],"mappings":"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","sourcesContent":["import mongoose from \"mongoose\";\nimport connectDB from \"../../utils/connectDB\";\nimport Cart from \"../../models/Cart\";\nimport jwt from \"jsonwebtoken\";\n\nconnectDB();\n\nconst { ObjectId } = mongoose.Types;\n\nexport default async (req, res) => {\n  switch (req.method) {\n    case \"GET\":\n      await handleGetRequest(req, res);\n      break;\n    case \"POST\":\n      await handlePostRequest(req, res);\n      break;\n    default:\n      res.status(422).send(\"Unknown method\");\n  }\n};\n\nasync function handleGetRequest(req, res) {\n  if (!req.headers.authorization) {\n    return res.status(401).send(\"No authorization token\");\n  }\n  try {\n    const { userId } = jwt.verify(\n      req.headers.authorization,\n      process.env.JWT_SECRET\n    );\n    const cart = await Cart.findOne({ user: userId }).populate({\n      path: \"carts.product\",\n      model: \"Product\"\n    });\n    res.status(200).json(cart);\n  } catch (error) {\n    console.error(error);\n    res.status(500).send(\"Error in fetching cart\");\n  }\n}\n\nasync function handlePostRequest(req, res) {\n  const { productId, quantity } = req.body;\n  if (!req.headers.authorization) {\n    return res.status(401).send(\"No authorization token\");\n  }\n  try {\n    const { userId } = jwt.verify(\n      req.headers.authorization,\n      process.env.JWT_SECRET\n    );\n    const cart = await Cart.findOne({ user: userId });\n\n    if (cart) {\n      //check if product in cart already exist\n      const productExist = cart.carts.some(cart =>\n        ObjectId(productId).equals(cart.product)\n      );\n      if (productExist) {\n        //add 1 to quantity of product\n        await Cart.findOneAndUpdate(\n          { _id: cart._id, \"carts.product\": productId },\n          {\n            $inc: { \"carts.$.quantity\": quantity }\n          }\n        );\n      } else {\n        const newProduct = { quantity, product: productId };\n        await Cart.findOneAndUpdate(\n          { _id: cart._id },\n          {\n            $addToSet: { carts: newProduct }\n          }\n        );\n      }\n    } else {\n      await new Cart({\n        user: userId,\n        carts: [{ quantity, product: productId }]\n      }).save();\n    }\n    res.status(200).send(\"Successfully added to cart\");\n  } catch (error) {\n    console.error(error);\n    res.status(500).send(\"Error in adding cart\");\n  }\n}\n"]},"metadata":{},"sourceType":"module"}