{"ast":null,"code":"import jwt from 'jsonwebtoken';\nimport Cart from '../../models/Cart';\nimport Order from '../../models/Order';\nimport connectDB from '../../utils/connectDB';\nimport calculateCartTotal from '../../utils/calculateCartTotal';\nimport Stripe from 'stripe';\nimport uuid from 'uuid/v4';\nconst stripe = Stripe('sk_test_fuj6QYY8wSU9cjYY5MADHPur00VXinvlZr');\nexport default (async (req, res) => {\n  await connectDB();\n  const {\n    paymentData\n  } = req.body;\n\n  try {\n    const {\n      userId\n    } = jwt.verify(req.headers.authorization, process.env.JWT_SECRET); // find cart based on User Id\n\n    const cart = await Cart.findOne({\n      user: userId\n    }).populate({\n      path: 'carts.product',\n      model: 'Product'\n    }); // calculate cart total\n\n    const {\n      cartTotal,\n      stripeTotal\n    } = calculateCartTotal(cart.carts); //get email from paymentData\n\n    const prevCustomer = await stripe.customers.list({\n      email: paymentData.email,\n      limit: 1\n    });\n    const isExistingCustomer = prevCustomer.data.length > 0;\n    let newCustomer;\n\n    if (!isExistingCustomer) {\n      newCustomer = await stripe.customers.create({\n        email: paymentData.email,\n        source: paymentData.id\n      });\n    }\n\n    const customer = isExistingCustomer && prevCustomer.data[0].id || newCustomer.id; // create charge\n\n    const charge = await stripe.charges.create({\n      currency: 'PHP',\n      amount: stripeTotal,\n      receipt_email: paymentData.email,\n      customer,\n      description: `Checkout | ${paymentData.email} | ${paymentData.id}`\n    }, {\n      idempotencyKey: uuid()\n    }); //add order to database\n\n    await new Order({\n      user: userId,\n      email: paymentData.email,\n      total: cartTotal,\n      products: cart.carts\n    }).save(); //clear products in cart\n\n    await Cart.findOneAndUpdate({\n      _id: cart._id\n    }, {\n      $set: {\n        carts: []\n      }\n    });\n    res.status(200).send('Checkout successful');\n  } catch (error) {\n    console.log(error);\n    res.status(500).send('Error in processing your order. Please try again');\n  }\n});","map":{"version":3,"sources":["/home/russ/projects/dress-shop/pages/api/checkout.js"],"names":["jwt","Cart","Order","connectDB","calculateCartTotal","Stripe","uuid","stripe","req","res","paymentData","body","userId","verify","headers","authorization","process","env","JWT_SECRET","cart","findOne","user","populate","path","model","cartTotal","stripeTotal","carts","prevCustomer","customers","list","email","limit","isExistingCustomer","data","length","newCustomer","create","source","id","customer","charge","charges","currency","amount","receipt_email","description","idempotencyKey","total","products","save","findOneAndUpdate","_id","$set","status","send","error","console","log"],"mappings":"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","sourcesContent":["import jwt from 'jsonwebtoken';\nimport Cart from '../../models/Cart';\nimport Order from '../../models/Order';\nimport connectDB from '../../utils/connectDB';\nimport calculateCartTotal from '../../utils/calculateCartTotal';\nimport Stripe from 'stripe';\nimport uuid from 'uuid/v4';\n\nconst stripe = Stripe('sk_test_fuj6QYY8wSU9cjYY5MADHPur00VXinvlZr');\n\nexport default async (req, res) => {\n  await connectDB();\n\n  const { paymentData } = req.body;\n\n  try {\n    const { userId } = jwt.verify(\n      req.headers.authorization,\n      process.env.JWT_SECRET\n    );\n    // find cart based on User Id\n    const cart = await Cart.findOne({ user: userId }).populate({\n      path: 'carts.product',\n      model: 'Product',\n    });\n    // calculate cart total\n    const { cartTotal, stripeTotal } = calculateCartTotal(cart.carts);\n    //get email from paymentData\n    const prevCustomer = await stripe.customers.list({\n      email: paymentData.email,\n      limit: 1,\n    });\n\n    const isExistingCustomer = prevCustomer.data.length > 0;\n    let newCustomer;\n    if (!isExistingCustomer) {\n      newCustomer = await stripe.customers.create({\n        email: paymentData.email,\n        source: paymentData.id,\n      });\n    }\n    const customer =\n      (isExistingCustomer && prevCustomer.data[0].id) || newCustomer.id;\n    // create charge\n    const charge = await stripe.charges.create(\n      {\n        currency: 'PHP',\n        amount: stripeTotal,\n        receipt_email: paymentData.email,\n        customer,\n        description: `Checkout | ${paymentData.email} | ${paymentData.id}`,\n      },\n      {\n        idempotencyKey: uuid(),\n      }\n    );\n    //add order to database\n    await new Order({\n      user: userId,\n      email: paymentData.email,\n      total: cartTotal,\n      products: cart.carts,\n    }).save();\n    //clear products in cart\n    await Cart.findOneAndUpdate({ _id: cart._id }, { $set: { carts: [] } });\n    res.status(200).send('Checkout successful');\n  } catch (error) {\n    console.log(error);\n    res.status(500).send('Error in processing your order. Please try again');\n  }\n};\n"]},"metadata":{},"sourceType":"module"}