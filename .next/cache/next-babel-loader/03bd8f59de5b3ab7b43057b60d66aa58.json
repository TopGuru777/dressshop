{"ast":null,"code":"import connectDB from \"../../utils/connectDB\";\nimport bcrypt from \"bcryptjs\";\nimport User from \"../../models/User\";\nimport jwt from \"jsonwebtoken\";\nexport default (async (req, res) => {\n  const {\n    email,\n    password\n  } = req.body;\n\n  try {\n    //check if email is exist\n    const user = await User.findOne({\n      email\n    });\n\n    if (!user) {\n      return res.status(404).send(\"Email does not exist\");\n    } // check if user password match in db\n\n\n    const isPasswordMatch = await bcrypt.compareSync(password, user.password);\n    console.log(isPasswordMatch);\n    res.send(\"test\");\n  } catch (error) {\n    console.error(error);\n    res.status(500).send(\"Error logging in user. Please try to login again\");\n  }\n});","map":{"version":3,"sources":["/home/russ/projects/dress-shop/pages/api/login.js"],"names":["connectDB","bcrypt","User","jwt","req","res","email","password","body","user","findOne","status","send","isPasswordMatch","compareSync","console","log","error"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,uBAAtB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AAEA,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACjC,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsBH,GAAG,CAACI,IAAhC;;AACA,MAAI;AACF;AACA,UAAMC,IAAI,GAAG,MAAMP,IAAI,CAACQ,OAAL,CAAa;AAAEJ,MAAAA;AAAF,KAAb,CAAnB;;AACA,QAAI,CAACG,IAAL,EAAW;AACT,aAAOJ,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,sBAArB,CAAP;AACD,KALC,CAMF;;;AACA,UAAMC,eAAe,GAAG,MAAMZ,MAAM,CAACa,WAAP,CAAmBP,QAAnB,EAA6BE,IAAI,CAACF,QAAlC,CAA9B;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAYH,eAAZ;AACAR,IAAAA,GAAG,CAACO,IAAJ,CAAS,MAAT;AACD,GAVD,CAUE,OAAOK,KAAP,EAAc;AACdF,IAAAA,OAAO,CAACE,KAAR,CAAcA,KAAd;AACAZ,IAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,kDAArB;AACD;AACF,CAhBD","sourcesContent":["import connectDB from \"../../utils/connectDB\";\nimport bcrypt from \"bcryptjs\";\nimport User from \"../../models/User\";\nimport jwt from \"jsonwebtoken\";\n\nexport default async (req, res) => {\n  const { email, password } = req.body;\n  try {\n    //check if email is exist\n    const user = await User.findOne({ email });\n    if (!user) {\n      return res.status(404).send(\"Email does not exist\");\n    }\n    // check if user password match in db\n    const isPasswordMatch = await bcrypt.compareSync(password, user.password);\n    console.log(isPasswordMatch);\n    res.send(\"test\");\n  } catch (error) {\n    console.error(error);\n    res.status(500).send(\"Error logging in user. Please try to login again\");\n  }\n};\n"]},"metadata":{},"sourceType":"module"}