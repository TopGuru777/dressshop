{"ast":null,"code":"import connectDB from \"../../utils/connectDB\";\nimport bcrypt from \"bcryptjs\";\nimport User from \"../../models/User\";\nimport isEmail from \"validator/lib/isEmail\";\nimport isLength from \"validator/lib/isLength\";\nimport jwt from \"jsonwebtoken\";\nconnectDB();\nexport default (async (req, res) => {\n  const {\n    name,\n    email,\n    password\n  } = req.body; //Validate user input\n\n  if (isLength(name, {\n    min: 3\n  })) {\n    return res.status(422).send(\"Name must be 3 characters long\");\n  }\n\n  if (isLength(password, {\n    min: 6\n  })) {\n    return res.status(422).send(\"Password must be 6 characters long\");\n  }\n\n  if (isEmail(email)) {\n    return res.status(422).send(\"Email must be valid\");\n  } // check if user is exist in db\n\n\n  const user = await User.findOne({\n    email\n  });\n\n  if (user) {\n    return res.status(422).send(\"Email is already taken\");\n  } //hash user password\n\n\n  const hash = await bcrypt.hashSync(password, 10);\n\n  try {\n    //create new user\n    const newUser = await new User({\n      name,\n      email,\n      password: hash\n    }).save(); //create token for new user\n\n    const token = jwt.sign({\n      userId: newUser._id\n    }, process.env.JWT_SECRET, {\n      expiresIn: \"7d\"\n    }); //send back token to client\n\n    res.status(201).json(token);\n  } catch (error) {\n    console.error(error);\n    res.status(500).send(\"Error in creating in users. Please try again\");\n  }\n});","map":{"version":3,"sources":["/home/russ/projects/dress-shop/pages/api/signup.js"],"names":["connectDB","bcrypt","User","isEmail","isLength","jwt","req","res","name","email","password","body","min","status","send","user","findOne","hash","hashSync","newUser","save","token","sign","userId","_id","process","env","JWT_SECRET","expiresIn","json","error","console"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,uBAAtB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AAEAL,SAAS;AAET,gBAAe,OAAOM,GAAP,EAAYC,GAAZ,KAAoB;AACjC,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,MAA4BJ,GAAG,CAACK,IAAtC,CADiC,CAEjC;;AACA,MAAIP,QAAQ,CAACI,IAAD,EAAO;AAAEI,IAAAA,GAAG,EAAE;AAAP,GAAP,CAAZ,EAAgC;AAC9B,WAAOL,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,gCAArB,CAAP;AACD;;AACD,MAAIV,QAAQ,CAACM,QAAD,EAAW;AAAEE,IAAAA,GAAG,EAAE;AAAP,GAAX,CAAZ,EAAoC;AAClC,WAAOL,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,oCAArB,CAAP;AACD;;AACD,MAAIX,OAAO,CAACM,KAAD,CAAX,EAAoB;AAClB,WAAOF,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,qBAArB,CAAP;AACD,GAXgC,CAYjC;;;AACA,QAAMC,IAAI,GAAG,MAAMb,IAAI,CAACc,OAAL,CAAa;AAAEP,IAAAA;AAAF,GAAb,CAAnB;;AACA,MAAIM,IAAJ,EAAU;AACR,WAAOR,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,wBAArB,CAAP;AACD,GAhBgC,CAiBjC;;;AACA,QAAMG,IAAI,GAAG,MAAMhB,MAAM,CAACiB,QAAP,CAAgBR,QAAhB,EAA0B,EAA1B,CAAnB;;AACA,MAAI;AACF;AACA,UAAMS,OAAO,GAAG,MAAM,IAAIjB,IAAJ,CAAS;AAAEM,MAAAA,IAAF;AAAQC,MAAAA,KAAR;AAAeC,MAAAA,QAAQ,EAAEO;AAAzB,KAAT,EAA0CG,IAA1C,EAAtB,CAFE,CAGF;;AACA,UAAMC,KAAK,GAAGhB,GAAG,CAACiB,IAAJ,CAAS;AAAEC,MAAAA,MAAM,EAAEJ,OAAO,CAACK;AAAlB,KAAT,EAAkCC,OAAO,CAACC,GAAR,CAAYC,UAA9C,EAA0D;AACtEC,MAAAA,SAAS,EAAE;AAD2D,KAA1D,CAAd,CAJE,CAOF;;AACArB,IAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBgB,IAAhB,CAAqBR,KAArB;AACD,GATD,CASE,OAAOS,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACAvB,IAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,8CAArB;AACD;AACF,CAhCD","sourcesContent":["import connectDB from \"../../utils/connectDB\";\nimport bcrypt from \"bcryptjs\";\nimport User from \"../../models/User\";\nimport isEmail from \"validator/lib/isEmail\";\nimport isLength from \"validator/lib/isLength\";\nimport jwt from \"jsonwebtoken\";\n\nconnectDB();\n\nexport default async (req, res) => {\n  const { name, email, password } = req.body;\n  //Validate user input\n  if (isLength(name, { min: 3 })) {\n    return res.status(422).send(\"Name must be 3 characters long\");\n  }\n  if (isLength(password, { min: 6 })) {\n    return res.status(422).send(\"Password must be 6 characters long\");\n  }\n  if (isEmail(email)) {\n    return res.status(422).send(\"Email must be valid\");\n  }\n  // check if user is exist in db\n  const user = await User.findOne({ email });\n  if (user) {\n    return res.status(422).send(\"Email is already taken\");\n  }\n  //hash user password\n  const hash = await bcrypt.hashSync(password, 10);\n  try {\n    //create new user\n    const newUser = await new User({ name, email, password: hash }).save();\n    //create token for new user\n    const token = jwt.sign({ userId: newUser._id }, process.env.JWT_SECRET, {\n      expiresIn: \"7d\"\n    });\n    //send back token to client\n    res.status(201).json(token);\n  } catch (error) {\n    console.error(error);\n    res.status(500).send(\"Error in creating in users. Please try again\");\n  }\n};\n"]},"metadata":{},"sourceType":"module"}