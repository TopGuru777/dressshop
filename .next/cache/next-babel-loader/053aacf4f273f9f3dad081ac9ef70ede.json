{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport aws from 'aws-sdk';\nimport multer from 'multer';\nimport multerS3 from 'multer-s3';\nimport uuid from 'uuid/v4';\nconst s3 = new aws.S3({\n  accessKeyId: 'AKIAIW2XE7PTZLQQZIJQ',\n  secretAccessKey: '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',\n  region: 'ap-southeast-1'\n});\nconst upload = multer({\n  storage: multerS3({\n    s3: s3,\n    acl: 'public-read',\n    bucket: 'dress-shop',\n    metadata: function (req, file, cb) {\n      console.log(file);\n      cb(null, {\n        fieldName: file.fieldname\n      });\n    },\n    key: function (req, file, cb) {\n      cb(null, req.s3Key);\n    }\n  })\n});\nconst singleFileUpload = upload.single('image');\n\nconst uploadToS3 = (req, res) => {\n  req.s3Key = uuid();\n  const imageURL = `https://dress-shop.s3-ap-southeast-1.amazonaws.com/${req.s3Key}`;\n  return new _Promise((resolve, reject) => {\n    return singleFileUpload(req, res, err => {\n      console.log(req.body);\n    });\n  });\n};\n\nexport default (async (req, res) => {\n  const file = req.body.file;\n  var params = {\n    Bucket: 'dress-shop',\n    Key: file.originalname,\n    Body: file.buffer,\n    ContentType: file.mimetype,\n    ACL: 'public-read'\n  };\n  s3.upload(params, function (err, data) {\n    if (err) {\n      res.status(500).json({\n        error: true,\n        Message: err\n      });\n    } else {\n      res.send({\n        data\n      });\n      var newFileUploaded = {\n        description: req.body.description,\n        fileLink: s3FileURL + file.originalname,\n        s3_key: params.Key\n      };\n      var document = new DOCUMENT(newFileUploaded);\n      document.save(function (error, newFile) {\n        if (error) {\n          throw error;\n        }\n      });\n    }\n  });\n});","map":{"version":3,"sources":["/home/russ/projects/dress-shop/pages/api/upload.js"],"names":["aws","multer","multerS3","uuid","s3","S3","accessKeyId","secretAccessKey","region","upload","storage","acl","bucket","metadata","req","file","cb","console","log","fieldName","fieldname","key","s3Key","singleFileUpload","single","uploadToS3","res","imageURL","resolve","reject","err","body","params","Bucket","Key","originalname","Body","buffer","ContentType","mimetype","ACL","data","status","json","error","Message","send","newFileUploaded","description","fileLink","s3FileURL","s3_key","document","DOCUMENT","save","newFile"],"mappings":"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","sourcesContent":["import aws from 'aws-sdk';\nimport multer from 'multer';\nimport multerS3 from 'multer-s3';\nimport uuid from 'uuid/v4';\n\nconst s3 = new aws.S3({\n  accessKeyId: 'AKIAIW2XE7PTZLQQZIJQ',\n  secretAccessKey: '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',\n  region: 'ap-southeast-1'\n});\n\nconst upload = multer({\n  storage: multerS3({\n    s3: s3,\n    acl: 'public-read',\n    bucket: 'dress-shop',\n    metadata: function(req, file, cb) {\n      console.log(file);\n      cb(null, { fieldName: file.fieldname });\n    },\n    key: function(req, file, cb) {\n      cb(null, req.s3Key);\n    }\n  })\n});\n\nconst singleFileUpload = upload.single('image');\n\nconst uploadToS3 = (req, res) => {\n  req.s3Key = uuid();\n  const imageURL = `https://dress-shop.s3-ap-southeast-1.amazonaws.com/${req.s3Key}`;\n  return new Promise((resolve, reject) => {\n    return singleFileUpload(req, res, err => {\n      console.log(req.body);\n    });\n  });\n};\n\nexport default async (req, res) => {\n  const file = req.body.file;\n  var params = {\n    Bucket: 'dress-shop',\n    Key: file.originalname,\n    Body: file.buffer,\n    ContentType: file.mimetype,\n    ACL: 'public-read'\n  };\n\n  s3.upload(params, function(err, data) {\n    if (err) {\n      res.status(500).json({ error: true, Message: err });\n    } else {\n      res.send({ data });\n      var newFileUploaded = {\n        description: req.body.description,\n        fileLink: s3FileURL + file.originalname,\n        s3_key: params.Key\n      };\n      var document = new DOCUMENT(newFileUploaded);\n      document.save(function(error, newFile) {\n        if (error) {\n          throw error;\n        }\n      });\n    }\n  });\n};\n"]},"metadata":{},"sourceType":"module"}