{"ast":null,"code":"import jwt from \"jsonwebtoken\";\nimport bcrypt from \"bcryptjs\";\nimport User from \"../../models/User\";\nimport connectDB from \"../../utils/connectDB\";\nconnectDB();\nexport default (async (req, res) => {\n  const {\n    email,\n    password\n  } = req.body;\n\n  try {\n    //check if email is exist\n    const user = await User.findOne({\n      email\n    }).select(\"+password\");\n    if (!user) return res.status(404).send(\"Email does not exist\"); // // check if user password match in db\n\n    const isPasswordMatch = await bcrypt.compareSync(password, user.password);\n    if (!isPasswordMatch) return res.status(401).send(\"Email or password does not match\"); //create token to login user\n\n    const token = await jwt.sign({\n      userId: user._id\n    }, process.env.JWT_SECRET, {\n      expiresIn: \"7d\"\n    }); //send token to client\n\n    res.status(200).json(token);\n  } catch (error) {\n    console.error(error);\n    res.status(500).send(\"Error logging in user. Please try to login again\");\n  }\n});","map":{"version":3,"sources":["/home/russ/projects/dress-shop/pages/api/login.js"],"names":["jwt","bcrypt","User","connectDB","req","res","email","password","body","user","findOne","select","status","send","isPasswordMatch","compareSync","token","sign","userId","_id","process","env","JWT_SECRET","expiresIn","json","error","console"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,cAAhB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AAEAA,SAAS;AAET,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACjC,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsBH,GAAG,CAACI,IAAhC;;AACA,MAAI;AACF;AACA,UAAMC,IAAI,GAAG,MAAMP,IAAI,CAACQ,OAAL,CAAa;AAAEJ,MAAAA;AAAF,KAAb,EAAwBK,MAAxB,CAA+B,WAA/B,CAAnB;AACA,QAAI,CAACF,IAAL,EAAW,OAAOJ,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,sBAArB,CAAP,CAHT,CAIF;;AACA,UAAMC,eAAe,GAAG,MAAMb,MAAM,CAACc,WAAP,CAAmBR,QAAnB,EAA6BE,IAAI,CAACF,QAAlC,CAA9B;AACA,QAAI,CAACO,eAAL,EACE,OAAOT,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,kCAArB,CAAP,CAPA,CAQF;;AACA,UAAMG,KAAK,GAAG,MAAMhB,GAAG,CAACiB,IAAJ,CAAS;AAAEC,MAAAA,MAAM,EAAET,IAAI,CAACU;AAAf,KAAT,EAA+BC,OAAO,CAACC,GAAR,CAAYC,UAA3C,EAAuD;AACzEC,MAAAA,SAAS,EAAE;AAD8D,KAAvD,CAApB,CATE,CAYF;;AACAlB,IAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBY,IAAhB,CAAqBR,KAArB;AACD,GAdD,CAcE,OAAOS,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACApB,IAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,kDAArB;AACD;AACF,CApBD","sourcesContent":["import jwt from \"jsonwebtoken\";\nimport bcrypt from \"bcryptjs\";\nimport User from \"../../models/User\";\nimport connectDB from \"../../utils/connectDB\";\n\nconnectDB();\n\nexport default async (req, res) => {\n  const { email, password } = req.body;\n  try {\n    //check if email is exist\n    const user = await User.findOne({ email }).select(\"+password\");\n    if (!user) return res.status(404).send(\"Email does not exist\");\n    // // check if user password match in db\n    const isPasswordMatch = await bcrypt.compareSync(password, user.password);\n    if (!isPasswordMatch)\n      return res.status(401).send(\"Email or password does not match\");\n    //create token to login user\n    const token = await jwt.sign({ userId: user._id }, process.env.JWT_SECRET, {\n      expiresIn: \"7d\"\n    });\n    //send token to client\n    res.status(200).json(token);\n  } catch (error) {\n    console.error(error);\n    res.status(500).send(\"Error logging in user. Please try to login again\");\n  }\n};\n"]},"metadata":{},"sourceType":"module"}