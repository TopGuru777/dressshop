{"ast":null,"code":"import connectDB from '../../utils/connectDB';\nimport Product from '../../models/Product';\nexport default (async (req, res) => {\n  await connectDB();\n\n  switch (req.method) {\n    case 'GET':\n      await handleGet(req, res);\n      break;\n\n    case 'POST':\n      await handlePost(req, res);\n\n    default:\n      break;\n  }\n});\n\nasync function handleGet(req, res) {\n  let {\n    currentPage,\n    pageSize\n  } = req.query;\n  let products = [];\n  const totalProducts = await Product.countDocuments();\n  currentPage = Number(currentPage);\n  pageSize = Number(pageSize);\n\n  if (currentPage === 1) {\n    products = await Product.find().limit(pageSize);\n  } else {\n    const skips = pageSize * (currentPage - 1);\n    products = await Product.find().skip(skips).limit(pageSize);\n  }\n\n  res.status(200).json({\n    products,\n    totalProducts\n  });\n}\n\nasync function handlePost(req, res) {\n  const {\n    name,\n    price,\n    description,\n    imageURL,\n    category\n  } = req.body;\n\n  try {\n    const product = await new Product({\n      name,\n      price,\n      description,\n      imageURL,\n      category\n    }).save();\n    res.status(201).json({\n      success: true,\n      product\n    });\n  } catch (error) {\n    console.error(error);\n    res.status(500).send('Error in creating product');\n  }\n}","map":{"version":3,"sources":["/home/russ/projects/dress-shop/pages/api/products.js"],"names":["connectDB","Product","req","res","method","handleGet","handlePost","currentPage","pageSize","query","products","totalProducts","countDocuments","Number","find","limit","skips","skip","status","json","name","price","description","imageURL","category","body","product","save","success","error","console","send"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,uBAAtB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AAEA,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACjC,QAAMH,SAAS,EAAf;;AACA,UAAQE,GAAG,CAACE,MAAZ;AACE,SAAK,KAAL;AACE,YAAMC,SAAS,CAACH,GAAD,EAAMC,GAAN,CAAf;AACA;;AACF,SAAK,MAAL;AACE,YAAMG,UAAU,CAACJ,GAAD,EAAMC,GAAN,CAAhB;;AACF;AACE;AAPJ;AASD,CAXD;;AAaA,eAAeE,SAAf,CAAyBH,GAAzB,EAA8BC,GAA9B,EAAmC;AACjC,MAAI;AAAEI,IAAAA,WAAF;AAAeC,IAAAA;AAAf,MAA4BN,GAAG,CAACO,KAApC;AACA,MAAIC,QAAQ,GAAG,EAAf;AACA,QAAMC,aAAa,GAAG,MAAMV,OAAO,CAACW,cAAR,EAA5B;AACAL,EAAAA,WAAW,GAAGM,MAAM,CAACN,WAAD,CAApB;AACAC,EAAAA,QAAQ,GAAGK,MAAM,CAACL,QAAD,CAAjB;;AAEA,MAAID,WAAW,KAAK,CAApB,EAAuB;AACrBG,IAAAA,QAAQ,GAAG,MAAMT,OAAO,CAACa,IAAR,GAAeC,KAAf,CAAqBP,QAArB,CAAjB;AACD,GAFD,MAEO;AACL,UAAMQ,KAAK,GAAGR,QAAQ,IAAID,WAAW,GAAG,CAAlB,CAAtB;AACAG,IAAAA,QAAQ,GAAG,MAAMT,OAAO,CAACa,IAAR,GACdG,IADc,CACTD,KADS,EAEdD,KAFc,CAERP,QAFQ,CAAjB;AAGD;;AACDL,EAAAA,GAAG,CAACe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAET,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAArB;AACD;;AAED,eAAeL,UAAf,CAA0BJ,GAA1B,EAA+BC,GAA/B,EAAoC;AAClC,QAAM;AAAEiB,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA,WAAf;AAA4BC,IAAAA,QAA5B;AAAsCC,IAAAA;AAAtC,MAAmDtB,GAAG,CAACuB,IAA7D;;AACA,MAAI;AACF,UAAMC,OAAO,GAAG,MAAM,IAAIzB,OAAJ,CAAY;AAChCmB,MAAAA,IADgC;AAEhCC,MAAAA,KAFgC;AAGhCC,MAAAA,WAHgC;AAIhCC,MAAAA,QAJgC;AAKhCC,MAAAA;AALgC,KAAZ,EAMnBG,IANmB,EAAtB;AAOAxB,IAAAA,GAAG,CAACe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAES,MAAAA,OAAO,EAAE,IAAX;AAAiBF,MAAAA;AAAjB,KAArB;AACD,GATD,CASE,OAAOG,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACA1B,IAAAA,GAAG,CAACe,MAAJ,CAAW,GAAX,EAAgBa,IAAhB,CAAqB,2BAArB;AACD;AACF","sourcesContent":["import connectDB from '../../utils/connectDB';\nimport Product from '../../models/Product';\n\nexport default async (req, res) => {\n  await connectDB();\n  switch (req.method) {\n    case 'GET':\n      await handleGet(req, res);\n      break;\n    case 'POST':\n      await handlePost(req, res);\n    default:\n      break;\n  }\n};\n\nasync function handleGet(req, res) {\n  let { currentPage, pageSize } = req.query;\n  let products = [];\n  const totalProducts = await Product.countDocuments();\n  currentPage = Number(currentPage);\n  pageSize = Number(pageSize);\n\n  if (currentPage === 1) {\n    products = await Product.find().limit(pageSize);\n  } else {\n    const skips = pageSize * (currentPage - 1);\n    products = await Product.find()\n      .skip(skips)\n      .limit(pageSize);\n  }\n  res.status(200).json({ products, totalProducts });\n}\n\nasync function handlePost(req, res) {\n  const { name, price, description, imageURL, category } = req.body;\n  try {\n    const product = await new Product({\n      name,\n      price,\n      description,\n      imageURL,\n      category\n    }).save();\n    res.status(201).json({ success: true, product });\n  } catch (error) {\n    console.error(error);\n    res.status(500).send('Error in creating product');\n  }\n}\n"]},"metadata":{},"sourceType":"module"}