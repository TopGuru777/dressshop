{"ast":null,"code":"import jwt from 'jsonwebtoken';\nimport mongoose from 'mongoose';\nimport Cart from '../../models/Cart';\nimport Product from '../../models/Product';\nimport connectDB from '../../utils/connectDB';\nconst {\n  ObjectId\n} = mongoose.Types;\nexport default (async (req, res) => {\n  await connectDB();\n\n  switch (req.method) {\n    case 'GET':\n      await handleGetRequest(req, res);\n      break;\n\n    case 'POST':\n      await handlePostRequest(req, res);\n      break;\n\n    case 'DELETE':\n      await handleDeleteRequest(req, res);\n      break;\n\n    default:\n      res.status(422).send('Unknown method');\n  }\n});\n\nasync function handleGetRequest(req, res) {\n  if (!req.headers.authorization) {\n    return res.status(401).send('No authorization token');\n  }\n\n  try {\n    const {\n      userId\n    } = jwt.verify(req.headers.authorization, 'mysecretkey');\n    const cart = await Cart.findOne({\n      user: userId\n    }).populate({\n      path: 'carts.product',\n      model: 'Product'\n    });\n    res.status(200).json(cart);\n  } catch (error) {\n    console.error(error);\n    res.status(500).json(error);\n  }\n}\n\nasync function handlePostRequest(req, res) {\n  const {\n    productId,\n    quantity\n  } = req.body;\n\n  if (!req.headers.authorization) {\n    return res.status(401).send('No authorization token');\n  }\n\n  try {\n    const {\n      userId\n    } = jwt.verify(req.headers.authorization, 'mysecretkey');\n    const cart = await Cart.findOne({\n      user: userId\n    });\n\n    if (cart) {\n      //check if product in cart already exist\n      const productExist = cart.carts.some(cart => ObjectId(productId).equals(cart.product));\n\n      if (productExist) {\n        //add 1 to quantity of product\n        await Cart.findOneAndUpdate({\n          _id: cart._id,\n          'carts.product': productId\n        }, {\n          $inc: {\n            'carts.$.quantity': quantity\n          }\n        });\n      } else {\n        const newProduct = {\n          quantity,\n          product: productId\n        };\n        await Cart.findOneAndUpdate({\n          _id: cart._id\n        }, {\n          $addToSet: {\n            carts: newProduct\n          }\n        });\n      }\n    } else {\n      await new Cart({\n        user: userId,\n        carts: [{\n          quantity,\n          product: productId\n        }]\n      }).save();\n    }\n\n    res.status(200).send('Successfully added to cart');\n  } catch (error) {\n    console.error(error);\n    res.status(500).send('Error in adding cart');\n  }\n}\n\nasync function handleDeleteRequest(req, res) {\n  const {\n    cartId\n  } = req.query;\n\n  if (!req.headers.authorization) {\n    return res.status(401).send('No authorization token');\n  }\n\n  try {\n    const {\n      userId\n    } = jwt.verify(req.headers.authorization, process.env.JWT_SECRET);\n    const cart = await Cart.findOneAndUpdate({\n      user: userId\n    }, {\n      $pull: {\n        carts: {\n          _id: cartId\n        }\n      }\n    });\n    res.status(200).send('Successfully cart deleted');\n  } catch (error) {\n    console.error(error);\n    res.status(500).send('Error in deleting cart');\n  }\n}","map":{"version":3,"sources":["/home/russ/projects/dress-shop/pages/api/cart.js"],"names":["jwt","mongoose","Cart","Product","connectDB","ObjectId","Types","req","res","method","handleGetRequest","handlePostRequest","handleDeleteRequest","status","send","headers","authorization","userId","verify","cart","findOne","user","populate","path","model","json","error","console","productId","quantity","body","productExist","carts","some","equals","product","findOneAndUpdate","_id","$inc","newProduct","$addToSet","save","cartId","query","process","env","JWT_SECRET","$pull"],"mappings":"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","sourcesContent":["import jwt from 'jsonwebtoken';\nimport mongoose from 'mongoose';\nimport Cart from '../../models/Cart';\nimport Product from '../../models/Product';\nimport connectDB from '../../utils/connectDB';\n\nconst { ObjectId } = mongoose.Types;\n\nexport default async (req, res) => {\n  await connectDB();\n  switch (req.method) {\n    case 'GET':\n      await handleGetRequest(req, res);\n      break;\n    case 'POST':\n      await handlePostRequest(req, res);\n      break;\n    case 'DELETE':\n      await handleDeleteRequest(req, res);\n      break;\n    default:\n      res.status(422).send('Unknown method');\n  }\n};\n\nasync function handleGetRequest(req, res) {\n  if (!req.headers.authorization) {\n    return res.status(401).send('No authorization token');\n  }\n  try {\n    const { userId } = jwt.verify(req.headers.authorization, 'mysecretkey');\n    const cart = await Cart.findOne({ user: userId }).populate({\n      path: 'carts.product',\n      model: 'Product',\n    });\n    res.status(200).json(cart);\n  } catch (error) {\n    console.error(error);\n    res.status(500).json(error);\n  }\n}\n\nasync function handlePostRequest(req, res) {\n  const { productId, quantity } = req.body;\n  if (!req.headers.authorization) {\n    return res.status(401).send('No authorization token');\n  }\n  try {\n    const { userId } = jwt.verify(req.headers.authorization, 'mysecretkey');\n    const cart = await Cart.findOne({ user: userId });\n\n    if (cart) {\n      //check if product in cart already exist\n      const productExist = cart.carts.some((cart) =>\n        ObjectId(productId).equals(cart.product)\n      );\n      if (productExist) {\n        //add 1 to quantity of product\n        await Cart.findOneAndUpdate(\n          { _id: cart._id, 'carts.product': productId },\n          {\n            $inc: { 'carts.$.quantity': quantity },\n          }\n        );\n      } else {\n        const newProduct = { quantity, product: productId };\n        await Cart.findOneAndUpdate(\n          { _id: cart._id },\n          {\n            $addToSet: { carts: newProduct },\n          }\n        );\n      }\n    } else {\n      await new Cart({\n        user: userId,\n        carts: [{ quantity, product: productId }],\n      }).save();\n    }\n    res.status(200).send('Successfully added to cart');\n  } catch (error) {\n    console.error(error);\n    res.status(500).send('Error in adding cart');\n  }\n}\n\nasync function handleDeleteRequest(req, res) {\n  const { cartId } = req.query;\n  if (!req.headers.authorization) {\n    return res.status(401).send('No authorization token');\n  }\n  try {\n    const { userId } = jwt.verify(\n      req.headers.authorization,\n      process.env.JWT_SECRET\n    );\n    const cart = await Cart.findOneAndUpdate(\n      { user: userId },\n      { $pull: { carts: { _id: cartId } } }\n    );\n    res.status(200).send('Successfully cart deleted');\n  } catch (error) {\n    console.error(error);\n    res.status(500).send('Error in deleting cart');\n  }\n}\n"]},"metadata":{},"sourceType":"module"}